@page "/shiftplanner"
@using Randomize.Core.ShiftPlanner
@using System.Text
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JS


<h2>Shift Planner Randomizer</h2>

<!-- TIMELINE -->

<p style="margin-bottom:5px">Day Timeline (00:00 Today to 06:00 Next Day)</p>

<div class="timeline-container">

    <div class="timeline-bar">
        @foreach (int hour in Enumerable.Range(0, 31))
        {
            var currentHour = hour % 24; 

            <div class="hour-slot">
                <label class="hour-label">
                    @currentHour:00
                </label>
                <input class="required-input" 
                type="number" 
                min="0" 
                max="40"
                @bind-value="_shift.GetTimeSlot(hour).Demand"
                @bind-value:event="oninput"
                placeholder="0" />

                <select class="priority-select" @bind="_shift.GetTimeSlot(hour).Priority">
                    <option value="1">1 (Low)</option>
                    <option value="2" selected="selected">2 (Medium)</option>
                    <option value="3">3 (High)</option>
                </select>
            </div>
        }
    </div>  
</div>


<!-- ADDING EMPLOYEES -->

<p style="margin-top:8px; margin-bottom:3px">Add Employees</p>

<div class="employee-add-container">
    <input type="text"
    class="employee-input"
    placeholder="Employee name"
    @bind="_newEmployee.Name" />

    <input type="number"
    class="employee-input small"
    placeholder="Max hours (optional)"
    min="0"
    @bind="_newEmployee.MaxHours" />

    <div class="time-input-group">
        <input type="number"
        class="employee-input small"
        placeholder="Start hour"
        min="@(_newEmployee.StartNextDay ? 0 : 0)"
        max="@(_newEmployee.StartNextDay ? 6 : 23)"
        @bind="_newEmployee.ScheduleStart" />
        <label class="nextday-checkbox">
            <input type="checkbox" @bind="_newEmployee.StartNextDay" />
            <i class="bi bi-moon"></i>
        </label>
    </div>


    <div class="time-input-group">
        <input type="number"
        class="employee-input small"
        placeholder="End hour"
        min="@GetEndMin()"
        max="@(_newEmployee.EndNextDay ? 6 : 23)"
        @bind="_newEmployee.ScheduleEnd" />
        <label class="nextday-checkbox">
            <input type="checkbox" @bind="_newEmployee.EndNextDay" />
            <i class="bi bi-moon small small-icon"></i>
        </label>
    </div>

    <button class="employee-add-btn" @onclick="AddEmployee">
        <i class="bi bi-person-plus"></i> Add
    </button>
</div>

@if (!string.IsNullOrEmpty(_validationMessage))
{
    <p style="color:#ff7777; font-size:0.9rem; margin-top:4px;">@_validationMessage</p>
}


<!-- EMPLOYEE LIST -->

@if (_employees.Any())
{
    <div class="employee-list">
        @foreach (var emp in _employees)
        {
            <div class="employee-card">

                <div class="employee-list">
                    <strong>@emp.Name:</strong>
                </div>

                <div class="emp-right">
                    <span class="emp-hours">(max @emp.MaxHours h)</span>


                    @if (emp.ScheduleStart.HasValue && emp.ScheduleEnd.HasValue)
                    {
                        <span class="emp-time">@((MarkupString)$"{emp.DisplayStart} – {emp.DisplayEnd}")</span>
                    }
                    else
                    {
                        <span class="emp-time-muted">No schedule</span>
                    }

                    <button class="edit-btn" @onclick="@(() => EditEmployee(emp))" title="Edit employee">
                        <i class="bi bi-pencil-square"></i>
                    </button>

                    <button class="delete-btn" @onclick="@(() => DeleteEmployee(emp))" title="Remove employee">
                        <i class="bi bi-trash"></i>
                    </button>

                </div>
            </div>
        }
    </div>
}


<!-- ACTIONS -->

<div class="employee-actions">
    <button class="btn btn-outline-light me-2" @onclick="SaveEmployees">
        <i class="bi bi-save"></i> Save to TXT
    </button>

    <label class="btn btn-outline-light">
        <i class="bi bi-upload"></i> Load from TXT
        <InputFile OnChange="LoadEmployees" accept=".txt" style="display:none" />
    </label>
</div>



@code {
    private Shift _shift = new();
    private Employee _newEmployee = new();
    private List<Employee> _employees = new();

    private string? _validationMessage;

    protected override void OnInitialized()
    {


    }

    private int GetEndMin()
    {
        if (!_newEmployee.ScheduleStart.HasValue)
            return 0;

        if (_newEmployee.EndNextDay)
            return 0;

        return Math.Min(_newEmployee.ScheduleStart.Value + 1, 23);
    }

    private void AddEmployee()
    {
        if (string.IsNullOrWhiteSpace(_newEmployee.Name))
            return;

        AdjustStartRange();
        AdjustEndRange();

        int? start = _newEmployee.ScheduleStart;
        int? end = _newEmployee.ScheduleEnd;

        if (_newEmployee.StartNextDay && start.HasValue)
            start += 24;

        if (_newEmployee.EndNextDay && end.HasValue)
            end += 24;

        if (start.HasValue && end.HasValue && end <= start)
        {
            _validationMessage = "Schedule end must be later than start time.";
            return;
        }

        _validationMessage = null;

        if (_newEmployee.MaxHours == null || _newEmployee.MaxHours > 12 || _newEmployee.MaxHours < 1)
            _newEmployee.MaxHours = _newEmployee.MaxHoursDefault;

        _employees.Add(new Employee
            {
                Name = _newEmployee.Name,
                MaxHours = _newEmployee.MaxHours,
                ScheduleStart = start,
                ScheduleEnd = end,
                StartNextDay = _newEmployee.StartNextDay,
                EndNextDay = _newEmployee.EndNextDay
            });

        _newEmployee = new();

    }

    private void DeleteEmployee(Employee emp)
    {
        _employees.Remove(emp);
    }

    private void EditEmployee(Employee emp)
    {
        _newEmployee.Name = emp.Name;
        _newEmployee.MaxHours = emp.MaxHours;

        if (emp.StartNextDay) 
        {
            _newEmployee.ScheduleStart = emp.ScheduleStart - 24;
            _newEmployee.StartNextDay = true;
        }
        else 
        {
            _newEmployee.ScheduleStart = emp.ScheduleStart;
        }

        if (emp.EndNextDay)
        {
            _newEmployee.ScheduleEnd = emp.ScheduleEnd - 24;
            _newEmployee.EndNextDay = true;
        }
        else
        {
            _newEmployee.ScheduleEnd = emp.ScheduleEnd;
        }



        _employees.Remove(emp);
    }

    private async Task SaveEmployees()
    {
        var content = EmployeeFileService.WriteEmployees(_employees);
        var bytes = Encoding.UTF8.GetBytes(content);
        await JS.InvokeVoidAsync("downloadFile", "employees.txt", "text/plain", bytes);
    }

    private async Task LoadEmployees(InputFileChangeEventArgs e)
    {
        if (e.FileCount == 0) return;

        var file = e.File;

        const long maxAllowedBytes = 5 * 1024 * 1024; 
        using var stream = file.OpenReadStream(maxAllowedBytes);
        using var reader = new StreamReader(stream, Encoding.UTF8);
        var text = await reader.ReadToEndAsync();

        var loaded = EmployeeFileService.LoadEmployees(text);
        _employees = loaded;
    }

    private void AdjustStartRange()
    {
        if (_newEmployee.StartNextDay && _newEmployee.ScheduleStart > 6)
            _newEmployee.ScheduleStart = 5;
        else if (!_newEmployee.StartNextDay && _newEmployee.ScheduleStart > 23)
            _newEmployee.ScheduleStart = 0;
            _newEmployee.StartNextDay = true;

        if (_newEmployee.ScheduleStart < 0)
            _newEmployee.ScheduleStart = null;
    }

    private void AdjustEndRange()
    {
        if (_newEmployee.EndNextDay && _newEmployee.ScheduleEnd > 6)
            _newEmployee.ScheduleEnd = 6;
        else if (!_newEmployee.EndNextDay && _newEmployee.ScheduleEnd > 23)
            _newEmployee.ScheduleEnd = 6;
            _newEmployee.EndNextDay = true;

        if (_newEmployee.ScheduleEnd < 0)
            _newEmployee.ScheduleStart = null;
    }

}
