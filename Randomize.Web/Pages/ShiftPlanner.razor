@page "/shiftplanner"
@using Randomize.Core.ShiftPlanner


<h2>Shift Planner Randomizer</h2>

<p style="margin-bottom:5px">Day Timeline (00:00 Today to 06:00 Next Day)</p>

<div class="timeline-container">

    <div class="timeline-bar">
        @foreach (int hour in Enumerable.Range(0, 31))
        {
            var currentHour = hour % 24; 

            <div class="hour-slot">
                <label class="hour-label">
                    @currentHour:00
                </label>
                <input class="required-input" 
                type="number" 
                min="0" 
                max="40"
                @bind-value="_shift.GetTimeSlot(hour).Demand"
                @bind-value:event="oninput"
                placeholder="0" />

                <select class="priority-select" @bind="_shift.GetTimeSlot(hour).Priority">
                    <option value="1">1 (Low)</option>
                    <option value="2" selected="selected">2 (Medium)</option>
                    <option value="3">3 (High)</option>
                </select>
            </div>
        }
    </div>  
</div>

<h3 style="margin-top: 5px">Add Employee</h3>

<div class="employee-add-container">
    <input type="text"
    class="employee-input"
    placeholder="Employee name"
    @bind="_newEmployee.Name" />

    <input type="number"
    class="employee-input small"
    placeholder="Max hours (optional)"
    min="0"
    @bind="_newEmployee.MaxHours" />

    <input type="number"
    class="employee-input small"
    placeholder="Start hour (optional)"
    min="0"
    max="30"
    @bind="_newEmployee.ScheduleStart" />

    <input type="number"
    class="employee-input small"
    placeholder="End hour (optional)"
    min="0"
    max="30"
    @bind="_newEmployee.ScheduleEnd" />

    <button class="employee-add-btn" @onclick="AddEmployee">
        <i class="bi bi-person-plus"></i> Add
    </button>
</div>

@if (_employees.Any())
{
    <div class="employee-list">
        @foreach (var emp in _employees)
        {
            <div class="employee-card">
                
                <strong>@emp.Name:</strong>
                <span class="emp-hours">(max @emp.MaxHours h)</span>
           

            
                @if (emp.ScheduleStart.HasValue && emp.ScheduleEnd.HasValue)
                {
                    <span class="emp-time">@($"{emp.ScheduleStart}:00 – {emp.ScheduleEnd}:00")</span>
                }
                else
                {
                    <span class="emp-time-muted">No schedule</span>
                }

                <button class="delete-btn" @onclick="@(() => DeleteEmployee(emp))" title="Remove employee">
                    <i class="bi bi-trash"></i>
                </button>
               
            </div>
        }
    </div>
}



@code {
    private Shift _shift = new();
    private Employee _newEmployee = new();
    private List<Employee> _employees = new();

    protected override void OnInitialized()
    {


    }

    private void AddEmployee()
    {
        if (string.IsNullOrWhiteSpace(_newEmployee.Name))
            return;
        if (_newEmployee.MaxHours == null || _newEmployee.MaxHours > 12 || _newEmployee.MaxHours < 1)
            _newEmployee.MaxHours = _newEmployee.MaxHoursDefault;

        _employees.Add(new Employee
            {
                Name = _newEmployee.Name,
                MaxHours = _newEmployee.MaxHours,
                ScheduleStart = _newEmployee.ScheduleStart,
                ScheduleEnd = _newEmployee.ScheduleEnd
            });

        _newEmployee = new();
    }

    private void DeleteEmployee(Employee emp)
    {
        _employees.Remove(emp);
    }

}
