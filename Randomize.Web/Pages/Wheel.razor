@page "/wheel"
@inject IJSRuntime JS

<div class="content">

    <h2>Custom Spinning Wheel</h2>
    
        <!-- Controls -->
        <div>
            <p style="margin-top: 2rem; margin-bottom: 0px">Number of options:</p><br/>
            <input class="textfield-num" style="width: 8%" type="number" min="2" max="15" @bind="count" @bind:event="oninput" />
            <br /><br />

            <p style="margin-top: 0rem; margin-bottom: 0px">Wheel question?</p><br />
        <input class="textfield-main" rows="1" type="text" @bind="wheelQuestion" @bind:event="oninput"
               style="margin-bottom: 0.5rem; padding: 0; margin-top: 0px; width: 100%; max-width: 100%; max-height: 12px" />

            <button class="button-main" @onclick="SpinWheel" disabled="@(!IsValid)">🎯 Spin</button>
        </div>
      
        <!-- Wheel + Inputs -->
        <div>
            <canvas id="wheelCanvas" width="320" height="450"></canvas>
            <div style="margin-top:1rem;">
                @for (int i = 0; i < items.Count; i++)
                {
                    var currentIndex = i;
                    <input value="@items[currentIndex].Label" @oninput="e => OnLabelInput(e, currentIndex)" placeholder="Label" style="margin:2px;" />
                }
            </div>
        </div>
</div>

@if (!string.IsNullOrEmpty(selectedResult))
{
    <p>🎉 @wheelQuestion: @selectedResult</p>
}

@code {
@using Randomize.Core.Wheel

    private string? wheelQuestion;
    private int _count = 2;
    private int count
    {
        get => _count;
        set
        {
            int newValue = Math.Clamp(value, 2, 15);
            if (_count != newValue)
            {
                _count = newValue;
                InitItems();
                InvokeAsync(RenderWheel);
            }
        }
    }

    private List<WheelItem> items = new();
    private string selectedResult = "";


    protected override void OnInitialized()
    {
        InitItems();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderWheel();
        }
    }

    private void InitItems()
    {
        items = Enumerable.Range(1, count)
            .Select(i => new WheelItem { Label = $"Option {i}" })
            .ToList();
    }

    private async Task RenderWheel()
    {
        await JS.InvokeVoidAsync("renderWheel", items.Select(i => i.Label));
    }

    private async Task SpinWheel()
    {
        if (string.IsNullOrEmpty(wheelQuestion))
        {
            wheelQuestion = "Result";
        }
        selectedResult = await JS.InvokeAsync<string>("spinWheel", items.Select(i => i.Label));
        StateHasChanged();
    }

    private async Task OnLabelInput(ChangeEventArgs e, int index)
    {
        if (index < 0 || index >= items.Count)
            return;

        items[index].Label = e.Value?.ToString() ?? string.Empty;
        await RenderWheel();
    }

    private bool IsValid => items.Count >= 2 && items.All(i => !string.IsNullOrWhiteSpace(i.Label));
}