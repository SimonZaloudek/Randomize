@page "/wheel"
@inject IJSRuntime JS

<div class="content">

    <h2>Custom Spinning Wheel</h2>
    
    <!-- Controls -->
    <div>
        <p style="margin-top: 2rem; margin-bottom: 4px">Number of options:</p>
        <input class="textfield-num" style="width: 8%; min-width: 45px; margin-bottom: 15px" type="number" min="2" max="16" @bind-value="rawCountInput"
               @oninput="HandleInput"
               @onblur="HandleBlur" />
    </div>
  
    <!-- Wheel + Inputs -->
    <div>
    <canvas id="wheelCanvas" width="320" height="320"></canvas>
    </div><br/>

    @for (int i = 0; i < items.Count; i++)
    {
        var currentIndex = i;
        <input class="textfield-num" @oninput="e => OnLabelInput(e, currentIndex)" placeholder="@items[currentIndex].Placeholder" style="margin:2px; width: 20%; min-width: 15%" />
    }
    <br/>

    <button style="margin-top: 15px" class="button-main" @onclick="SpinWheel" disabled="@(!IsValid)">🎯 Spin</button>
</div>

@if (!string.IsNullOrEmpty(selectedResult))
{
    <p>🎉 Result: @selectedResult</p>
}

@code {
@using Randomize.Core.Wheel

    private string rawCountInput = "2";
    private int? _count = null;
    private int? count
    {
        get => _count;
        set
        {
            if (value.HasValue)
            {
                int newValue = Math.Clamp(value.Value, 2, 16);
                if (_count != newValue)
                {
                    _count = newValue;
                    InitItems();
                    InvokeAsync(RenderWheel);
                }
            }
            else
            {
                _count = null;
            }
        }
    }

    private List<WheelItem> items = new();
    private List<WheelItem> itemsUpdated = new(); 
    private string selectedResult = "";



    protected override void OnInitialized()
    {
        InitItems();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RenderWheel();
        }
    }

    private void HandleInput(ChangeEventArgs e)
    {
        rawCountInput = e.Value?.ToString() ?? string.Empty;
    
        if (int.TryParse(rawCountInput, out int parsed) && parsed >= 2 && parsed <= 16)
        {
            count = parsed;
        }
    }

    private void HandleBlur()
    {
        if (int.TryParse(rawCountInput, out int parsed))
        {
            count = parsed;
        }
        else
        {
            count = 2;
        }
    }

    private void InitItems()
    {
        var currentItems = items.ToList();

        if (!count.HasValue)
        {
            count = 2;
            return;     
        }

        items = Enumerable.Range(1, count.Value)
        .Select(i =>
        {
            var existing = currentItems.ElementAtOrDefault(i - 1);
            return new WheelItem
            {
                Label = existing?.Label ?? string.Empty,
                Placeholder = $"Option {i}"
            };
        })
        .ToList();
    }

    private async Task RenderWheel()
    {
        await JS.InvokeVoidAsync("renderWheel", items.Select(i => i.Label));
    }

    private async Task SpinWheel()
    {
        selectedResult = await JS.InvokeAsync<string>("spinWheel", items.Select(i => i.Label));
        StateHasChanged();
    }

    private async Task OnLabelInput(ChangeEventArgs e, int index)
    {
        if (index < 0 || index >= items.Count)
            return;

        items[index].Label = e.Value?.ToString() ?? string.Empty;
        await RenderWheel();
    }

    private bool IsValid => items.Count >= 2 && items.All(i => !string.IsNullOrWhiteSpace(i.Label));
}